name: Build Frontend

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Get latest release version
        if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
        id: get_version
        run: |
          # Get the latest release tag, defaulting to v0.0.0 if none exists
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          # Remove the 'v' prefix
          version=${latest_tag#v}
          # Split the version into parts
          IFS='.' read -r major minor patch <<< "$version"
          # Increment the patch version
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Zip dist folder
        if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
        run: |
          cd dist
          zip -r ../${{ steps.get_version.outputs.new_version }}.zip .

      - name: Zip wait-for-app-html folder
        if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
        run: |
          zip -r wait-for-app-html.zip wait-for-app-html

      - name: Create Release
        if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.get_version.outputs.new_version }}"
          name: "Release ${{ steps.get_version.outputs.new_version }}"
          files: |
            ${{ steps.get_version.outputs.new_version }}.zip
            wait-for-app-html.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
